head	1.1;
access;
symbols;
locks
	jds58:1.1; strict;
comment	@// @;


1.1
date	2000.10.15.14.38.20;	author jds58;	state Exp;
branches;
next	;


desc
@First Version -- Not Working
@


1.1
log
@Initial revision
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

#define MAX_PROFIT_LIMIT 100
#define max(a,b) (a>b?a:b)
#define select(a,b) (max(a,b) == a)?INCLUDED:NOT_INCLUDED

typedef enum {INCLUDED,NOT_INCLUDED,UNSET} selector;
typedef struct{
	selector s;
	int cost;
}table_entry;
typedef struct{
	int rank;
	int max_balls;
	int knapsack_capacity;
}process_data;

//Global Variables
table_entry *table;

int main(int argc,char *argv[])
{
	printf("Initializing...Process \n");
	MPI_Init(&argc,&argv);
	int numproc,rank;
	MPI_Comm_rank(MPI_COMM_WORLD,&rank);
	MPI_Comm_size(MPI_COMM_WORLD,&numproc);

	printf("Initializing...Process %d\n",rank);
	int knapsack_capacity,max_balls,seed;
	knapsack_capacity=atoi(argv[1]);
	max_balls=atoi(argv[2]);
	seed=atoi(argv[3]);
	
	if(argc != 4){
		printf("Error: knapsack <max capacity> <max balls> <seed>\n");
		exit(0);
	}else if(numproc != knapsack_capacity){
		printf("Error: Ensure number of processes = Capacity of Knapsack\n");
		MPI_Finalize();
		exit(0);
	}

	//Begin Program
	int *profit;
	int *weight;
	table_entry *table;		// Stores a column for each 


	profit=(int*)malloc(sizeof(int)*max_balls);
	weight=(int*)malloc(sizeof(int)*max_balls);
	table = (table_entry*)malloc(sizeof(table_entry)*max_balls);

	srandom(seed);
	for(int i=0;i<max_balls;i++){
		profit[i]=random()%MAX_PROFIT_LIMIT;
		weight[i]=random()%(knapsack_capacity+1);
	}

	for(int i=0;i<max_balls;i++){
		int cost_with_i,cost_without_i;
		//Receive T[i-1][j-Wi]
		//Check i-1>=0 and j-Wi>=0 and rank>0
		if(rank-weight[i]<0 || i==0)
			cost_with_i=0;
		else{
			MPI_Status status;
			MPI_Recv(&cost_with_i,1,MPI_INT,rank-1,i-1,MPI_COMM_WORLD,&status);
			cost_with_i+=profit[i];
		}
		//Compute T[i][j]
		table[i].cost=max(cost_with_i,cost_without_i);
		table[i].s=select(cost_with_i,cost_without_i);
		//Send to all procs with rank this_rank+Wi (in range), non-blocking
		MPI_Request request;
		for(int j=rank+1;j<numproc;j++){
			if(j-rank==weight[i])
				MPI_Isend(&table[i].cost,1,MPI_INT,j,i,MPI_COMM_WORLD,&request);
		}
	}

	// Assimilate Results and Print them
	
	MPI_Finalize();
}
@
