head	1.3;
access;
symbols;
locks
	jds58:1.3; strict;
comment	@ * @;


1.3
date	2000.09.15.18.46.15;	author jds58;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.13.20.54.02;	author jds58;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.13.18.55.47;	author jds58;	state Exp;
branches;
next	;


desc
@First Draft
Not Working
@


1.3
log
@Working..Single Barrier
@
text
@#include "main.h"

void main(void){
	barrier_t *b = new barrier_t;
	barrier_init(b,NUMTHRS);
	
	pthread_t thr[NUMTHRS];
	for(int i=0;i<NUMTHRS;i++){
		proc_info_t *p = new proc_info_t;
		p->id = i;
		p->b = b;
		pthread_create(&thr[i],NULL,process_init,(void*)p);
	}
	void *status;
	for(int i=0;i<NUMTHRS;i++)
		pthread_join(thr[i],&status);
	barrier_destroy(b);
	delete b;
}

void *process_init(void *proc){
	proc_info_t *p = (proc_info_t *)proc;
	printf("Process %d Started\n",p->id);
//	 Random Time Break
	struct timespec time,rem;
	for(int i=0;i<MAXBARRIERS;i++){
		time.tv_sec=random()%MAXTIME;
		time.tv_nsec=0;
		nanosleep(&time,&rem);
		printf("Process %d invoking barrier %d\n",p->id,i);
		barrier(p->b);
		printf("Process %d restarted\n",p->id);
	}
	printf("Process %d exited\n",p->id);
}
@


1.2
log
@*** empty log message ***
@
text
@d25 10
a34 5
	long int time=random()%MAXTIME;
	usleep(time);
	printf("Process %d invoking barrier\n",p->id);
	barrier(p->b);
	printf("Process %d restarted\n",p->id);
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
	barrier_t b;
d9 4
a12 4
		proc_info_t p;
		p.id = i;
		p.b = &b;
		pthread_create(&thr[i],NULL,process_init,(void*)&p);
d17 2
a18 1
	barrier_destroy(&b);
d24 6
a29 6
	// Random Time Break
//	long time=random();
//	usleep(time);
//	printf("Process %d invoking barrier\n",p->id);
//	barrier(p->b);
//	printf("Process %d restarted\n",p->id);
@
